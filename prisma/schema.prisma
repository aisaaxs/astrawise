generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  fullname  String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Session Session[]
  PlaidItem PlaidItem[]
  Account Account[]
  Transaction Transaction[]

  ChatMessage ChatMessage[]

  ChatTitle ChatTitle[]
}

model Session {
  id        String   @id @default(cuid())
  userId    String   @unique
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PlaidItem {
  id          String      @id @default(cuid())
  itemId      String   @unique
  accessToken String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
  accounts Account[]
  transactions Transaction[]
}

model Account {
  id               String        @id @default(cuid())
  accountId        String        @unique
  availableBalance Float?
  currentBalance   Float
  isoCurrencyCode  String?
  mask             String?
  name             String
  officialName     String?
  persistentAccId  String
  subtype          String
  type             String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  userId           String
  plaidItemId      String

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
  plaidItem PlaidItem @relation(fields: [plaidItemId], references: [id], onDelete: Cascade)
}

model Transaction {
  id              String    @id @default(cuid())
  transactionId   String    @unique
  accountId       String
  userId          String
  plaidItemId     String
  amount          Float
  date            DateTime
  authorizedDate  DateTime?
  category        String?
  subCategory     String?
  categoryId      String?
  personalFinanceCategory String?
  personalFinanceCategoryIconUrl String?
  merchantName    String?
  merchantLogoUrl String?
  paymentChannel  String?
  pending         Boolean
  currencyCode    String?
  transactionType String?
  website         String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
  plaidItem PlaidItem @relation(fields: [plaidItemId], references: [id], onDelete: Cascade)
}

model ChatMessage {
  id        String   @id @default(cuid())
  userId    String   
  chatId    String
  sender    String   // "user" or "bot"
  message   String   
  timestamp DateTime @default(now())

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChatTitle {
  id        String   @id @default(cuid())
  userId    String
  chatId    String  @unique
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}